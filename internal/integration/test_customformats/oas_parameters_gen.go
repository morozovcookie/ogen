// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	custom2 "github.com/morozovcookie/ogen/internal/integration/customformats/phonetype"
	custom3 "github.com/morozovcookie/ogen/internal/integration/customformats/rgbatype"
	"github.com/morozovcookie/ogen/middleware"
	"github.com/morozovcookie/ogen/ogenerrors"
	"github.com/morozovcookie/ogen/uri"
	"github.com/morozovcookie/ogen/validate"
)

// PhoneGetParams is parameters of GET /phone operation.
type PhoneGetParams struct {
	// Phone number.
	Phone custom2.Phone
	// Color.
	Color OptRgba
	// Hex.
	Hex OptHex
}

func unpackPhoneGetParams(packed middleware.Parameters) (params PhoneGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "phone",
			In:   "query",
		}
		params.Phone = packed[key].(custom2.Phone)
	}
	{
		key := middleware.ParameterKey{
			Name: "color",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Color = v.(OptRgba)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "hex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Hex = v.(OptHex)
		}
	}
	return params
}

func decodePhoneGetParams(args [0]string, r *http.Request) (params PhoneGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: phone.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := formatPhone().DecodeText(val)
				if err != nil {
					return err
				}

				params.Phone = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "phone",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: color.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "color",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotColorVal custom3.RGBA
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := formatRgba().DecodeText(val)
					if err != nil {
						return err
					}

					paramsDotColorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Color.SetTo(paramsDotColorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "color",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: hex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHexVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := formatHex().DecodeText(val)
					if err != nil {
						return err
					}

					paramsDotHexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Hex.SetTo(paramsDotHexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hex",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
