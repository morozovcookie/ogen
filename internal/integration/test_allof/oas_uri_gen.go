// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"

	"github.com/morozovcookie/ogen/conv"
	"github.com/morozovcookie/ogen/uri"
	"github.com/morozovcookie/ogen/validate"
)

// EncodeURI encodes Location as URI form.
func (s *Location) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("lat", func(e uri.Encoder) error {
		return e.EncodeValue(conv.Float64ToString(s.Lat))
	}); err != nil {
		return errors.Wrap(err, "encode field \"lat\"")
	}
	if err := e.EncodeField("lon", func(e uri.Encoder) error {
		return e.EncodeValue(conv.Float64ToString(s.Lon))
	}); err != nil {
		return errors.Wrap(err, "encode field \"lon\"")
	}
	return nil
}

var uriFieldsNameOfLocation = [2]string{
	0: "lat",
	1: "lon",
}

// DecodeURI decodes Location from URI form.
func (s *Location) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Location to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "lat":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				s.Lat = c
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lat\"")
			}
		case "lon":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				s.Lon = c
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lon\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Location")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfLocation) {
					name = uriFieldsNameOfLocation[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}
