// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/morozovcookie/ogen/validate"
)

func (s *Board) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.FileTypes == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_types",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Boards) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Captcha) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CaptchaType) Validate() error {
	switch s {
	case "recaptcha":
		return nil
	case "invisible_recaptcha":
		return nil
	case "recaptcha3":
		return nil
	case "2chcaptcha":
		return nil
	case "appid":
		return nil
	case "passcode":
		return nil
	case "nocaptcha":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Error) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Code.Set {
			if err := func() error {
				if err := s.Code.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ErrorCode) Validate() error {
	switch s {
	case 0:
		return nil
	case 403:
		return nil
	case 666:
		return nil
	case 667:
		return nil
	case -2:
		return nil
	case -3:
		return nil
	case -31:
		return nil
	case -4:
		return nil
	case -41:
		return nil
	case -42:
		return nil
	case -5:
		return nil
	case -6:
		return nil
	case -7:
		return nil
	case -8:
		return nil
	case -9:
		return nil
	case -10:
		return nil
	case -11:
		return nil
	case -12:
		return nil
	case -13:
		return nil
	case -14:
		return nil
	case -15:
		return nil
	case -16:
		return nil
	case -19:
		return nil
	case -20:
		return nil
	case -21:
		return nil
	case -22:
		return nil
	case -23:
		return nil
	case -300:
		return nil
	case -301:
		return nil
	case -302:
		return nil
	case -303:
		return nil
	case -304:
		return nil
	case -24:
		return nil
	case -25:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *File) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FileType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 10:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Like) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MobilePost) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		if s.Post.Set {
			if err := func() error {
				if err := s.Post.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "post",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MobileThreadLastInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MobileThreadPostsAfter) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Posts {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "posts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Passcode) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Post) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Files {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "files",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PostingNewPost) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PostingNewThread) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Report) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Error.Set {
			if err := func() error {
				if err := s.Error.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserPostingPostOK) Validate() error {
	switch s.Type {
	case PostingNewThreadUserPostingPostOK:
		if err := s.PostingNewThread.Validate(); err != nil {
			return err
		}
		return nil
	case PostingNewPostUserPostingPostOK:
		if err := s.PostingNewPost.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *UserPostingPostReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CaptchaType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "captcha_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
